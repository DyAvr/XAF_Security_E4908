@inject NavigationManager navigationManager
@inject IPrincipalProvider principalProvider
@inject IAuthenticatedSecurityProvider securityProvider
@inject IObjectSpaceFactory objectSpaceFactory

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>

@code{
    protected override void OnInitialized() {
        base.OnInitialized();
        //Fast check
        if (!principalProvider.User.Identity.IsAuthenticated) {
            string returnUrl = $"~/{navigationManager.ToBaseRelativePath(navigationManager.Uri)}";
            navigationManager.NavigateTo($"Login?returnUrl={returnUrl}", forceLoad: true);
        }else{
            try {
                //Hard check
                securityProvider.EnsureLogon();
            } catch  {
                //The authentication token exists but isn't valid
                navigationManager.NavigateTo($"/logout", forceLoad: true);

                //TODO add returnUrl support 
                //string returnUrl = $"~/{navigationManager.ToBaseRelativePath(navigationManager.Uri)}";
                //navigationManager.NavigateTo($"api/logout?returnUrl={returnUrl}", forceLoad: true);            
            }
        }
    }
}